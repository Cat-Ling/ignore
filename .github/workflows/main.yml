name: test latest ffmpeg

on:
  workflow_dispatch:
    inputs:
      video_link:
        description: 'link to test'
        required: true
      downloader:
        description: 'Downloader option'
        default: none
        type: choice
        options:
          - none
          - ffmpeg
          - aria2c
      preset:
        description: 'FFmpeg preset (optional)'
        default: slower
        type: choice
        options:
          - ultrafast
          - superfast
          - veryfast
          - faster
          - fast
          - medium
          - slow
          - slower
          - veryslow
      fps:
        description: 'Frames per second (optional)'
        default: 24
      crf:
        description: 'Constant rate factor (optional) (0–63) lower means higher quality, (17–28) sane range'
        default: 28
      encoder:
        description: 'FFmpeg encoder (optional)'
        default: libx264
        type: choice
        options:
          - libx264
          - libx265
          - libvpx-vp9
          - libaom-av1
      aname:
        description: 'Name of the artifact zip (optional)'
        default: video1
      proxy:
        description: 'Proxy option'
        default: true
        type: choice
        options:
          - true
          - false
      cookies_gpg:
        description: 'Encrypted cookies file (optional)'
        required: false
        default: ''

jobs:
  process_video:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        machine:
          - first-machine

    env:
      VIDEO_LINK: ${{ github.event.inputs.video_link }}
      DOWNLOADER: ${{ github.event.inputs.downloader }}
      PRESET: ${{ github.event.inputs.preset }}
      FPS: ${{ github.event.inputs.fps }}
      CRF: ${{ github.event.inputs.crf }}
      ENCODER: ${{ github.event.inputs.encoder }}
      ANAME: ${{ github.event.inputs.aname }}
      ENABLE_DEPRECATED_TUN_ADDRESS_X: true
      PROXY: ${{ github.event.inputs.proxy }}
      COOKIES_GPG: ${{ github.event.inputs.cookies_gpg }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install Sing-box (if proxy is enabled)
        if: env.PROXY == 'true'
        run: |
          sudo curl -fsSL https://sing-box.app/gpg.key -o /etc/apt/keyrings/sagernet.asc
          sudo chmod a+r /etc/apt/keyrings/sagernet.asc
          echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/sagernet.asc] https://deb.sagernet.org/ * *" | \
          sudo tee /etc/apt/sources.list.d/sagernet.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y sing-box=1.11.4
      
      - name: Setup Sing-box (if proxy is enabled)
        if: env.PROXY == 'true'
        run: |
          sudo rm -f /etc/sing-box/config.json
          sudo curl -sSL 'https://github.com/Cat-Ling/ignore/raw/refs/heads/main/config.json' -o /etc/sing-box/config.json
          sudo systemctl disable sing-box
          sleep 2
          sudo ENABLE_DEPRECATED_TUN_ADDRESS_X=true nohup sing-box run -c /etc/sing-box/config.json > sing-box.log 2>&1 &
          curl https://ifconfig.me/ip
      
      - name: Create Directories
        run: |
          mkdir -p videos
          mkdir -p artifacts
      
      - name: Install Dependencies
        run: |
          sudo apt-get install -y ffmpeg yt-dlp aria2
      
      - name: a cookie for you
        run: |
          if [ -n "$COOKIES_GPG" ]; then
            echo "$COOKIES_GPG" | base64 --decode > cookies.gpg
            gpg --batch --yes --passphrase "$AES_PASSWORD" --output ./cookies.txt --decrypt cookies.gpg
            echo "Cookies decrypted successfully."
          else
            echo "No cookies file provided."
          fi
        env:
          AES_PASSWORD: ${{ secrets.AES_PASSWORD }}
      
      - name: Download Video
        run: |
          cd videos
          COOKIE_OPTION=""
          if [ -f "../cookies.txt" ]; then
            COOKIE_OPTION="--cookies ../cookies.txt"
          fi
          if [ "$DOWNLOADER" == "ffmpeg" ]; then
            sudo nice -n -20 yt-dlp --downloader ffmpeg -o "input_video.%(ext)s" $COOKIE_OPTION "$VIDEO_LINK"
          elif [ "$DOWNLOADER" == "aria2c" ]; then
            sudo nice -n -20 yt-dlp --downloader aria2c -o "input_video.%(ext)s" $COOKIE_OPTION "$VIDEO_LINK"
          else
            sudo nice -n -20 yt-dlp --concurrent-fragments 10 -o "input_video.%(ext)s" $COOKIE_OPTION "$VIDEO_LINK"
          fi
      
      - name: Convert Video with H.264 Compression
        run: |
          cd videos
          VIDEO_TITLE=$(yt-dlp --get-title "$VIDEO_LINK" | sed 's/[^a-zA-Z0-9]/_/g')
          sudo nice -n -20 ffmpeg -thread_queue_size 2048 -i input_video.* -c:v $ENCODER -preset $PRESET -vf fps=$FPS -crf $CRF -max_muxing_queue_size 9999 -c:a aac -threads 4 -bufsize 16M -strict experimental "${VIDEO_TITLE}.mp4"
          rm -rf input_video.*
      
      - name: Upload to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.aname }}
          compression-level: 9
          path: videos/*.mp4
